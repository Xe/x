// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: within/website/x/mimi/statuspage/v1/statuspage.proto

package v1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "within.website/x/gen/within/website/x/mimi/statuspage/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UpdateName is the fully-qualified name of the Update service.
	UpdateName = "within.website.x.mimi.statuspage.Update"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UpdatePokeProcedure is the fully-qualified name of the Update's Poke RPC.
	UpdatePokeProcedure = "/within.website.x.mimi.statuspage.Update/Poke"
)

// UpdateClient is a client for the within.website.x.mimi.statuspage.Update service.
type UpdateClient interface {
	Poke(context.Context, *connect.Request[v1.StatusUpdate]) (*connect.Response[emptypb.Empty], error)
}

// NewUpdateClient constructs a client for the within.website.x.mimi.statuspage.Update service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UpdateClient {
	baseURL = strings.TrimRight(baseURL, "/")
	updateMethods := v1.File_within_website_x_mimi_statuspage_v1_statuspage_proto.Services().ByName("Update").Methods()
	return &updateClient{
		poke: connect.NewClient[v1.StatusUpdate, emptypb.Empty](
			httpClient,
			baseURL+UpdatePokeProcedure,
			connect.WithSchema(updateMethods.ByName("Poke")),
			connect.WithClientOptions(opts...),
		),
	}
}

// updateClient implements UpdateClient.
type updateClient struct {
	poke *connect.Client[v1.StatusUpdate, emptypb.Empty]
}

// Poke calls within.website.x.mimi.statuspage.Update.Poke.
func (c *updateClient) Poke(ctx context.Context, req *connect.Request[v1.StatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return c.poke.CallUnary(ctx, req)
}

// UpdateHandler is an implementation of the within.website.x.mimi.statuspage.Update service.
type UpdateHandler interface {
	Poke(context.Context, *connect.Request[v1.StatusUpdate]) (*connect.Response[emptypb.Empty], error)
}

// NewUpdateHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateHandler(svc UpdateHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	updateMethods := v1.File_within_website_x_mimi_statuspage_v1_statuspage_proto.Services().ByName("Update").Methods()
	updatePokeHandler := connect.NewUnaryHandler(
		UpdatePokeProcedure,
		svc.Poke,
		connect.WithSchema(updateMethods.ByName("Poke")),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.mimi.statuspage.Update/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdatePokeProcedure:
			updatePokeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateHandler struct{}

func (UnimplementedUpdateHandler) Poke(context.Context, *connect.Request[v1.StatusUpdate]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.mimi.statuspage.Update.Poke is not implemented"))
}
