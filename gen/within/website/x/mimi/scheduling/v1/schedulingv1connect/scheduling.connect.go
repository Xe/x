// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: within/website/x/mimi/scheduling/v1/scheduling.proto

package schedulingv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "within.website/x/gen/within/website/x/mimi/scheduling/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SchedulingName is the fully-qualified name of the Scheduling service.
	SchedulingName = "within.website.x.mimi.scheduling.v1.Scheduling"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchedulingParseEmailProcedure is the fully-qualified name of the Scheduling's ParseEmail RPC.
	SchedulingParseEmailProcedure = "/within.website.x.mimi.scheduling.v1.Scheduling/ParseEmail"
)

// SchedulingClient is a client for the within.website.x.mimi.scheduling.v1.Scheduling service.
type SchedulingClient interface {
	ParseEmail(context.Context, *connect.Request[v1.ParseReq]) (*connect.Response[v1.ParseResp], error)
}

// NewSchedulingClient constructs a client for the within.website.x.mimi.scheduling.v1.Scheduling
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchedulingClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SchedulingClient {
	baseURL = strings.TrimRight(baseURL, "/")
	schedulingMethods := v1.File_within_website_x_mimi_scheduling_v1_scheduling_proto.Services().ByName("Scheduling").Methods()
	return &schedulingClient{
		parseEmail: connect.NewClient[v1.ParseReq, v1.ParseResp](
			httpClient,
			baseURL+SchedulingParseEmailProcedure,
			connect.WithSchema(schedulingMethods.ByName("ParseEmail")),
			connect.WithClientOptions(opts...),
		),
	}
}

// schedulingClient implements SchedulingClient.
type schedulingClient struct {
	parseEmail *connect.Client[v1.ParseReq, v1.ParseResp]
}

// ParseEmail calls within.website.x.mimi.scheduling.v1.Scheduling.ParseEmail.
func (c *schedulingClient) ParseEmail(ctx context.Context, req *connect.Request[v1.ParseReq]) (*connect.Response[v1.ParseResp], error) {
	return c.parseEmail.CallUnary(ctx, req)
}

// SchedulingHandler is an implementation of the within.website.x.mimi.scheduling.v1.Scheduling
// service.
type SchedulingHandler interface {
	ParseEmail(context.Context, *connect.Request[v1.ParseReq]) (*connect.Response[v1.ParseResp], error)
}

// NewSchedulingHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchedulingHandler(svc SchedulingHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	schedulingMethods := v1.File_within_website_x_mimi_scheduling_v1_scheduling_proto.Services().ByName("Scheduling").Methods()
	schedulingParseEmailHandler := connect.NewUnaryHandler(
		SchedulingParseEmailProcedure,
		svc.ParseEmail,
		connect.WithSchema(schedulingMethods.ByName("ParseEmail")),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.mimi.scheduling.v1.Scheduling/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SchedulingParseEmailProcedure:
			schedulingParseEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSchedulingHandler returns CodeUnimplemented from all methods.
type UnimplementedSchedulingHandler struct{}

func (UnimplementedSchedulingHandler) ParseEmail(context.Context, *connect.Request[v1.ParseReq]) (*connect.Response[v1.ParseResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.mimi.scheduling.v1.Scheduling.ParseEmail is not implemented"))
}
