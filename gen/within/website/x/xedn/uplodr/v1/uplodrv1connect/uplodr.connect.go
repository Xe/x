// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: within/website/x/xedn/uplodr/v1/uplodr.proto

package uplodrv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "within.website/x/gen/within/website/x/xedn/uplodr/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ImageName is the fully-qualified name of the Image service.
	ImageName = "within.website.x.xedn.uplodr.v1.Image"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ImagePingProcedure is the fully-qualified name of the Image's Ping RPC.
	ImagePingProcedure = "/within.website.x.xedn.uplodr.v1.Image/Ping"
	// ImageUploadProcedure is the fully-qualified name of the Image's Upload RPC.
	ImageUploadProcedure = "/within.website.x.xedn.uplodr.v1.Image/Upload"
	// ImageStreamProcedure is the fully-qualified name of the Image's Stream RPC.
	ImageStreamProcedure = "/within.website.x.xedn.uplodr.v1.Image/Stream"
)

// ImageClient is a client for the within.website.x.xedn.uplodr.v1.Image service.
type ImageClient interface {
	Ping(context.Context, *connect.Request[v1.Echo]) (*connect.Response[v1.Echo], error)
	Upload(context.Context, *connect.Request[v1.UploadReq]) (*connect.Response[v1.UploadResp], error)
	Stream(context.Context) *connect.BidiStreamForClient[v1.UploadReq, v1.UploadResp]
}

// NewImageClient constructs a client for the within.website.x.xedn.uplodr.v1.Image service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImageClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImageClient {
	baseURL = strings.TrimRight(baseURL, "/")
	imageMethods := v1.File_within_website_x_xedn_uplodr_v1_uplodr_proto.Services().ByName("Image").Methods()
	return &imageClient{
		ping: connect.NewClient[v1.Echo, v1.Echo](
			httpClient,
			baseURL+ImagePingProcedure,
			connect.WithSchema(imageMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		upload: connect.NewClient[v1.UploadReq, v1.UploadResp](
			httpClient,
			baseURL+ImageUploadProcedure,
			connect.WithSchema(imageMethods.ByName("Upload")),
			connect.WithClientOptions(opts...),
		),
		stream: connect.NewClient[v1.UploadReq, v1.UploadResp](
			httpClient,
			baseURL+ImageStreamProcedure,
			connect.WithSchema(imageMethods.ByName("Stream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// imageClient implements ImageClient.
type imageClient struct {
	ping   *connect.Client[v1.Echo, v1.Echo]
	upload *connect.Client[v1.UploadReq, v1.UploadResp]
	stream *connect.Client[v1.UploadReq, v1.UploadResp]
}

// Ping calls within.website.x.xedn.uplodr.v1.Image.Ping.
func (c *imageClient) Ping(ctx context.Context, req *connect.Request[v1.Echo]) (*connect.Response[v1.Echo], error) {
	return c.ping.CallUnary(ctx, req)
}

// Upload calls within.website.x.xedn.uplodr.v1.Image.Upload.
func (c *imageClient) Upload(ctx context.Context, req *connect.Request[v1.UploadReq]) (*connect.Response[v1.UploadResp], error) {
	return c.upload.CallUnary(ctx, req)
}

// Stream calls within.website.x.xedn.uplodr.v1.Image.Stream.
func (c *imageClient) Stream(ctx context.Context) *connect.BidiStreamForClient[v1.UploadReq, v1.UploadResp] {
	return c.stream.CallBidiStream(ctx)
}

// ImageHandler is an implementation of the within.website.x.xedn.uplodr.v1.Image service.
type ImageHandler interface {
	Ping(context.Context, *connect.Request[v1.Echo]) (*connect.Response[v1.Echo], error)
	Upload(context.Context, *connect.Request[v1.UploadReq]) (*connect.Response[v1.UploadResp], error)
	Stream(context.Context, *connect.BidiStream[v1.UploadReq, v1.UploadResp]) error
}

// NewImageHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImageHandler(svc ImageHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	imageMethods := v1.File_within_website_x_xedn_uplodr_v1_uplodr_proto.Services().ByName("Image").Methods()
	imagePingHandler := connect.NewUnaryHandler(
		ImagePingProcedure,
		svc.Ping,
		connect.WithSchema(imageMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	imageUploadHandler := connect.NewUnaryHandler(
		ImageUploadProcedure,
		svc.Upload,
		connect.WithSchema(imageMethods.ByName("Upload")),
		connect.WithHandlerOptions(opts...),
	)
	imageStreamHandler := connect.NewBidiStreamHandler(
		ImageStreamProcedure,
		svc.Stream,
		connect.WithSchema(imageMethods.ByName("Stream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.xedn.uplodr.v1.Image/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ImagePingProcedure:
			imagePingHandler.ServeHTTP(w, r)
		case ImageUploadProcedure:
			imageUploadHandler.ServeHTTP(w, r)
		case ImageStreamProcedure:
			imageStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedImageHandler returns CodeUnimplemented from all methods.
type UnimplementedImageHandler struct{}

func (UnimplementedImageHandler) Ping(context.Context, *connect.Request[v1.Echo]) (*connect.Response[v1.Echo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.xedn.uplodr.v1.Image.Ping is not implemented"))
}

func (UnimplementedImageHandler) Upload(context.Context, *connect.Request[v1.UploadReq]) (*connect.Response[v1.UploadResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.xedn.uplodr.v1.Image.Upload is not implemented"))
}

func (UnimplementedImageHandler) Stream(context.Context, *connect.BidiStream[v1.UploadReq, v1.UploadResp]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.xedn.uplodr.v1.Image.Stream is not implemented"))
}
