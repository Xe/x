// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: within/website/x/patchouli/v1/patchouli.proto

package patchouliv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "within.website/x/gen/within/website/x/patchouli/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyndicateName is the fully-qualified name of the Syndicate service.
	SyndicateName = "within.website.x.patchouli.v1.Syndicate"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyndicateInfoProcedure is the fully-qualified name of the Syndicate's Info RPC.
	SyndicateInfoProcedure = "/within.website.x.patchouli.v1.Syndicate/Info"
	// SyndicateDownloadProcedure is the fully-qualified name of the Syndicate's Download RPC.
	SyndicateDownloadProcedure = "/within.website.x.patchouli.v1.Syndicate/Download"
)

// SyndicateClient is a client for the within.website.x.patchouli.v1.Syndicate service.
type SyndicateClient interface {
	Info(context.Context, *connect.Request[v1.TwitchInfoReq]) (*connect.Response[v1.TwitchInfoResp], error)
	Download(context.Context, *connect.Request[v1.TwitchDownloadReq]) (*connect.Response[v1.TwitchDownloadResp], error)
}

// NewSyndicateClient constructs a client for the within.website.x.patchouli.v1.Syndicate service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyndicateClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyndicateClient {
	baseURL = strings.TrimRight(baseURL, "/")
	syndicateMethods := v1.File_within_website_x_patchouli_v1_patchouli_proto.Services().ByName("Syndicate").Methods()
	return &syndicateClient{
		info: connect.NewClient[v1.TwitchInfoReq, v1.TwitchInfoResp](
			httpClient,
			baseURL+SyndicateInfoProcedure,
			connect.WithSchema(syndicateMethods.ByName("Info")),
			connect.WithClientOptions(opts...),
		),
		download: connect.NewClient[v1.TwitchDownloadReq, v1.TwitchDownloadResp](
			httpClient,
			baseURL+SyndicateDownloadProcedure,
			connect.WithSchema(syndicateMethods.ByName("Download")),
			connect.WithClientOptions(opts...),
		),
	}
}

// syndicateClient implements SyndicateClient.
type syndicateClient struct {
	info     *connect.Client[v1.TwitchInfoReq, v1.TwitchInfoResp]
	download *connect.Client[v1.TwitchDownloadReq, v1.TwitchDownloadResp]
}

// Info calls within.website.x.patchouli.v1.Syndicate.Info.
func (c *syndicateClient) Info(ctx context.Context, req *connect.Request[v1.TwitchInfoReq]) (*connect.Response[v1.TwitchInfoResp], error) {
	return c.info.CallUnary(ctx, req)
}

// Download calls within.website.x.patchouli.v1.Syndicate.Download.
func (c *syndicateClient) Download(ctx context.Context, req *connect.Request[v1.TwitchDownloadReq]) (*connect.Response[v1.TwitchDownloadResp], error) {
	return c.download.CallUnary(ctx, req)
}

// SyndicateHandler is an implementation of the within.website.x.patchouli.v1.Syndicate service.
type SyndicateHandler interface {
	Info(context.Context, *connect.Request[v1.TwitchInfoReq]) (*connect.Response[v1.TwitchInfoResp], error)
	Download(context.Context, *connect.Request[v1.TwitchDownloadReq]) (*connect.Response[v1.TwitchDownloadResp], error)
}

// NewSyndicateHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyndicateHandler(svc SyndicateHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syndicateMethods := v1.File_within_website_x_patchouli_v1_patchouli_proto.Services().ByName("Syndicate").Methods()
	syndicateInfoHandler := connect.NewUnaryHandler(
		SyndicateInfoProcedure,
		svc.Info,
		connect.WithSchema(syndicateMethods.ByName("Info")),
		connect.WithHandlerOptions(opts...),
	)
	syndicateDownloadHandler := connect.NewUnaryHandler(
		SyndicateDownloadProcedure,
		svc.Download,
		connect.WithSchema(syndicateMethods.ByName("Download")),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.patchouli.v1.Syndicate/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyndicateInfoProcedure:
			syndicateInfoHandler.ServeHTTP(w, r)
		case SyndicateDownloadProcedure:
			syndicateDownloadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyndicateHandler returns CodeUnimplemented from all methods.
type UnimplementedSyndicateHandler struct{}

func (UnimplementedSyndicateHandler) Info(context.Context, *connect.Request[v1.TwitchInfoReq]) (*connect.Response[v1.TwitchInfoResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.patchouli.v1.Syndicate.Info is not implemented"))
}

func (UnimplementedSyndicateHandler) Download(context.Context, *connect.Request[v1.TwitchDownloadReq]) (*connect.Response[v1.TwitchDownloadResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.patchouli.v1.Syndicate.Download is not implemented"))
}
