// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: announce.proto

package announce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	jsonfeed "within.website/x/proto/external/jsonfeed"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Announce_Announce_FullMethodName = "/within.website.x.mimi.announce.Announce/Announce"
)

// AnnounceClient is the client API for Announce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnounceClient interface {
	Announce(ctx context.Context, in *jsonfeed.Item, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type announceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnounceClient(cc grpc.ClientConnInterface) AnnounceClient {
	return &announceClient{cc}
}

func (c *announceClient) Announce(ctx context.Context, in *jsonfeed.Item, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Announce_Announce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnounceServer is the server API for Announce service.
// All implementations must embed UnimplementedAnnounceServer
// for forward compatibility
type AnnounceServer interface {
	Announce(context.Context, *jsonfeed.Item) (*emptypb.Empty, error)
	mustEmbedUnimplementedAnnounceServer()
}

// UnimplementedAnnounceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnounceServer struct {
}

func (UnimplementedAnnounceServer) Announce(context.Context, *jsonfeed.Item) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedAnnounceServer) mustEmbedUnimplementedAnnounceServer() {}

// UnsafeAnnounceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnounceServer will
// result in compilation errors.
type UnsafeAnnounceServer interface {
	mustEmbedUnimplementedAnnounceServer()
}

func RegisterAnnounceServer(s grpc.ServiceRegistrar, srv AnnounceServer) {
	s.RegisterService(&Announce_ServiceDesc, srv)
}

func _Announce_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(jsonfeed.Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnounceServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Announce_Announce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnounceServer).Announce(ctx, req.(*jsonfeed.Item))
	}
	return interceptor(ctx, in, info, handler)
}

// Announce_ServiceDesc is the grpc.ServiceDesc for Announce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Announce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "within.website.x.mimi.announce.Announce",
	HandlerType: (*AnnounceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Announce",
			Handler:    _Announce_Announce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "announce.proto",
}
