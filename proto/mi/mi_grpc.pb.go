// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: mi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SwitchTracker_Members_FullMethodName      = "/within.website.x.mi.SwitchTracker/Members"
	SwitchTracker_WhoIsFront_FullMethodName   = "/within.website.x.mi.SwitchTracker/WhoIsFront"
	SwitchTracker_Switch_FullMethodName       = "/within.website.x.mi.SwitchTracker/Switch"
	SwitchTracker_GetSwitch_FullMethodName    = "/within.website.x.mi.SwitchTracker/GetSwitch"
	SwitchTracker_ListSwitches_FullMethodName = "/within.website.x.mi.SwitchTracker/ListSwitches"
)

// SwitchTrackerClient is the client API for SwitchTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchTrackerClient interface {
	Members(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MembersResp, error)
	WhoIsFront(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FrontChange, error)
	Switch(ctx context.Context, in *SwitchReq, opts ...grpc.CallOption) (*SwitchResp, error)
	GetSwitch(ctx context.Context, in *GetSwitchReq, opts ...grpc.CallOption) (*FrontChange, error)
	ListSwitches(ctx context.Context, in *ListSwitchesReq, opts ...grpc.CallOption) (*ListSwitchesResp, error)
}

type switchTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchTrackerClient(cc grpc.ClientConnInterface) SwitchTrackerClient {
	return &switchTrackerClient{cc}
}

func (c *switchTrackerClient) Members(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MembersResp, error) {
	out := new(MembersResp)
	err := c.cc.Invoke(ctx, SwitchTracker_Members_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchTrackerClient) WhoIsFront(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FrontChange, error) {
	out := new(FrontChange)
	err := c.cc.Invoke(ctx, SwitchTracker_WhoIsFront_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchTrackerClient) Switch(ctx context.Context, in *SwitchReq, opts ...grpc.CallOption) (*SwitchResp, error) {
	out := new(SwitchResp)
	err := c.cc.Invoke(ctx, SwitchTracker_Switch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchTrackerClient) GetSwitch(ctx context.Context, in *GetSwitchReq, opts ...grpc.CallOption) (*FrontChange, error) {
	out := new(FrontChange)
	err := c.cc.Invoke(ctx, SwitchTracker_GetSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchTrackerClient) ListSwitches(ctx context.Context, in *ListSwitchesReq, opts ...grpc.CallOption) (*ListSwitchesResp, error) {
	out := new(ListSwitchesResp)
	err := c.cc.Invoke(ctx, SwitchTracker_ListSwitches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchTrackerServer is the server API for SwitchTracker service.
// All implementations must embed UnimplementedSwitchTrackerServer
// for forward compatibility
type SwitchTrackerServer interface {
	Members(context.Context, *emptypb.Empty) (*MembersResp, error)
	WhoIsFront(context.Context, *emptypb.Empty) (*FrontChange, error)
	Switch(context.Context, *SwitchReq) (*SwitchResp, error)
	GetSwitch(context.Context, *GetSwitchReq) (*FrontChange, error)
	ListSwitches(context.Context, *ListSwitchesReq) (*ListSwitchesResp, error)
	mustEmbedUnimplementedSwitchTrackerServer()
}

// UnimplementedSwitchTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedSwitchTrackerServer struct {
}

func (UnimplementedSwitchTrackerServer) Members(context.Context, *emptypb.Empty) (*MembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedSwitchTrackerServer) WhoIsFront(context.Context, *emptypb.Empty) (*FrontChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoIsFront not implemented")
}
func (UnimplementedSwitchTrackerServer) Switch(context.Context, *SwitchReq) (*SwitchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Switch not implemented")
}
func (UnimplementedSwitchTrackerServer) GetSwitch(context.Context, *GetSwitchReq) (*FrontChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitch not implemented")
}
func (UnimplementedSwitchTrackerServer) ListSwitches(context.Context, *ListSwitchesReq) (*ListSwitchesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (UnimplementedSwitchTrackerServer) mustEmbedUnimplementedSwitchTrackerServer() {}

// UnsafeSwitchTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchTrackerServer will
// result in compilation errors.
type UnsafeSwitchTrackerServer interface {
	mustEmbedUnimplementedSwitchTrackerServer()
}

func RegisterSwitchTrackerServer(s grpc.ServiceRegistrar, srv SwitchTrackerServer) {
	s.RegisterService(&SwitchTracker_ServiceDesc, srv)
}

func _SwitchTracker_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchTrackerServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchTracker_Members_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchTrackerServer).Members(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchTracker_WhoIsFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchTrackerServer).WhoIsFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchTracker_WhoIsFront_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchTrackerServer).WhoIsFront(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchTracker_Switch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchTrackerServer).Switch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchTracker_Switch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchTrackerServer).Switch(ctx, req.(*SwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchTracker_GetSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchTrackerServer).GetSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchTracker_GetSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchTrackerServer).GetSwitch(ctx, req.(*GetSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchTracker_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchTrackerServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwitchTracker_ListSwitches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchTrackerServer).ListSwitches(ctx, req.(*ListSwitchesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SwitchTracker_ServiceDesc is the grpc.ServiceDesc for SwitchTracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwitchTracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "within.website.x.mi.SwitchTracker",
	HandlerType: (*SwitchTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Members",
			Handler:    _SwitchTracker_Members_Handler,
		},
		{
			MethodName: "WhoIsFront",
			Handler:    _SwitchTracker_WhoIsFront_Handler,
		},
		{
			MethodName: "Switch",
			Handler:    _SwitchTracker_Switch_Handler,
		},
		{
			MethodName: "GetSwitch",
			Handler:    _SwitchTracker_GetSwitch_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _SwitchTracker_ListSwitches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mi.proto",
}

const (
	POSSE_RefreshBlog_FullMethodName = "/within.website.x.mi.POSSE/RefreshBlog"
)

// POSSEClient is the client API for POSSE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type POSSEClient interface {
	RefreshBlog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pOSSEClient struct {
	cc grpc.ClientConnInterface
}

func NewPOSSEClient(cc grpc.ClientConnInterface) POSSEClient {
	return &pOSSEClient{cc}
}

func (c *pOSSEClient) RefreshBlog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, POSSE_RefreshBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// POSSEServer is the server API for POSSE service.
// All implementations must embed UnimplementedPOSSEServer
// for forward compatibility
type POSSEServer interface {
	RefreshBlog(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedPOSSEServer()
}

// UnimplementedPOSSEServer must be embedded to have forward compatible implementations.
type UnimplementedPOSSEServer struct {
}

func (UnimplementedPOSSEServer) RefreshBlog(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshBlog not implemented")
}
func (UnimplementedPOSSEServer) mustEmbedUnimplementedPOSSEServer() {}

// UnsafePOSSEServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to POSSEServer will
// result in compilation errors.
type UnsafePOSSEServer interface {
	mustEmbedUnimplementedPOSSEServer()
}

func RegisterPOSSEServer(s grpc.ServiceRegistrar, srv POSSEServer) {
	s.RegisterService(&POSSE_ServiceDesc, srv)
}

func _POSSE_RefreshBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSSEServer).RefreshBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POSSE_RefreshBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSSEServer).RefreshBlog(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// POSSE_ServiceDesc is the grpc.ServiceDesc for POSSE service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var POSSE_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "within.website.x.mi.POSSE",
	HandlerType: (*POSSEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshBlog",
			Handler:    _POSSE_RefreshBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mi.proto",
}
