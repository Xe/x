// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sanguisuga/sanguisuga.proto

package sanguisugaconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	sanguisuga "within.website/x/buf/sanguisuga"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TVName is the fully-qualified name of the TV service.
	TVName = "within.website.x.sanguisuga.TV"
	// AnimeName is the fully-qualified name of the Anime service.
	AnimeName = "within.website.x.sanguisuga.Anime"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TVListProcedure is the fully-qualified name of the TV's List RPC.
	TVListProcedure = "/within.website.x.sanguisuga.TV/List"
	// TVTrackProcedure is the fully-qualified name of the TV's Track RPC.
	TVTrackProcedure = "/within.website.x.sanguisuga.TV/Track"
	// TVUntrackProcedure is the fully-qualified name of the TV's Untrack RPC.
	TVUntrackProcedure = "/within.website.x.sanguisuga.TV/Untrack"
	// TVSnatchesProcedure is the fully-qualified name of the TV's Snatches RPC.
	TVSnatchesProcedure = "/within.website.x.sanguisuga.TV/Snatches"
	// AnimeListProcedure is the fully-qualified name of the Anime's List RPC.
	AnimeListProcedure = "/within.website.x.sanguisuga.Anime/List"
	// AnimeTrackProcedure is the fully-qualified name of the Anime's Track RPC.
	AnimeTrackProcedure = "/within.website.x.sanguisuga.Anime/Track"
	// AnimeUntrackProcedure is the fully-qualified name of the Anime's Untrack RPC.
	AnimeUntrackProcedure = "/within.website.x.sanguisuga.Anime/Untrack"
	// AnimeSnatchesProcedure is the fully-qualified name of the Anime's Snatches RPC.
	AnimeSnatchesProcedure = "/within.website.x.sanguisuga.Anime/Snatches"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	tVServiceDescriptor           = sanguisuga.File_sanguisuga_sanguisuga_proto.Services().ByName("TV")
	tVListMethodDescriptor        = tVServiceDescriptor.Methods().ByName("List")
	tVTrackMethodDescriptor       = tVServiceDescriptor.Methods().ByName("Track")
	tVUntrackMethodDescriptor     = tVServiceDescriptor.Methods().ByName("Untrack")
	tVSnatchesMethodDescriptor    = tVServiceDescriptor.Methods().ByName("Snatches")
	animeServiceDescriptor        = sanguisuga.File_sanguisuga_sanguisuga_proto.Services().ByName("Anime")
	animeListMethodDescriptor     = animeServiceDescriptor.Methods().ByName("List")
	animeTrackMethodDescriptor    = animeServiceDescriptor.Methods().ByName("Track")
	animeUntrackMethodDescriptor  = animeServiceDescriptor.Methods().ByName("Untrack")
	animeSnatchesMethodDescriptor = animeServiceDescriptor.Methods().ByName("Snatches")
)

// TVClient is a client for the within.website.x.sanguisuga.TV service.
type TVClient interface {
	List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error)
	Track(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Untrack(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Snatches(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.TVSnatches], error)
}

// NewTVClient constructs a client for the within.website.x.sanguisuga.TV service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTVClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TVClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tVClient{
		list: connect.NewClient[emptypb.Empty, sanguisuga.Shows](
			httpClient,
			baseURL+TVListProcedure,
			connect.WithSchema(tVListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		track: connect.NewClient[sanguisuga.Show, emptypb.Empty](
			httpClient,
			baseURL+TVTrackProcedure,
			connect.WithSchema(tVTrackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		untrack: connect.NewClient[sanguisuga.Show, emptypb.Empty](
			httpClient,
			baseURL+TVUntrackProcedure,
			connect.WithSchema(tVUntrackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		snatches: connect.NewClient[emptypb.Empty, sanguisuga.TVSnatches](
			httpClient,
			baseURL+TVSnatchesProcedure,
			connect.WithSchema(tVSnatchesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// tVClient implements TVClient.
type tVClient struct {
	list     *connect.Client[emptypb.Empty, sanguisuga.Shows]
	track    *connect.Client[sanguisuga.Show, emptypb.Empty]
	untrack  *connect.Client[sanguisuga.Show, emptypb.Empty]
	snatches *connect.Client[emptypb.Empty, sanguisuga.TVSnatches]
}

// List calls within.website.x.sanguisuga.TV.List.
func (c *tVClient) List(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error) {
	return c.list.CallUnary(ctx, req)
}

// Track calls within.website.x.sanguisuga.TV.Track.
func (c *tVClient) Track(ctx context.Context, req *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return c.track.CallUnary(ctx, req)
}

// Untrack calls within.website.x.sanguisuga.TV.Untrack.
func (c *tVClient) Untrack(ctx context.Context, req *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return c.untrack.CallUnary(ctx, req)
}

// Snatches calls within.website.x.sanguisuga.TV.Snatches.
func (c *tVClient) Snatches(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.TVSnatches], error) {
	return c.snatches.CallUnary(ctx, req)
}

// TVHandler is an implementation of the within.website.x.sanguisuga.TV service.
type TVHandler interface {
	List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error)
	Track(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Untrack(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Snatches(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.TVSnatches], error)
}

// NewTVHandler builds an HTTP handler from the service implementation. It returns the path on which
// to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTVHandler(svc TVHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tVListHandler := connect.NewUnaryHandler(
		TVListProcedure,
		svc.List,
		connect.WithSchema(tVListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tVTrackHandler := connect.NewUnaryHandler(
		TVTrackProcedure,
		svc.Track,
		connect.WithSchema(tVTrackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tVUntrackHandler := connect.NewUnaryHandler(
		TVUntrackProcedure,
		svc.Untrack,
		connect.WithSchema(tVUntrackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	tVSnatchesHandler := connect.NewUnaryHandler(
		TVSnatchesProcedure,
		svc.Snatches,
		connect.WithSchema(tVSnatchesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.sanguisuga.TV/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TVListProcedure:
			tVListHandler.ServeHTTP(w, r)
		case TVTrackProcedure:
			tVTrackHandler.ServeHTTP(w, r)
		case TVUntrackProcedure:
			tVUntrackHandler.ServeHTTP(w, r)
		case TVSnatchesProcedure:
			tVSnatchesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTVHandler returns CodeUnimplemented from all methods.
type UnimplementedTVHandler struct{}

func (UnimplementedTVHandler) List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.TV.List is not implemented"))
}

func (UnimplementedTVHandler) Track(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.TV.Track is not implemented"))
}

func (UnimplementedTVHandler) Untrack(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.TV.Untrack is not implemented"))
}

func (UnimplementedTVHandler) Snatches(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.TVSnatches], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.TV.Snatches is not implemented"))
}

// AnimeClient is a client for the within.website.x.sanguisuga.Anime service.
type AnimeClient interface {
	List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error)
	Track(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Untrack(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Snatches(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.AnimeSnatches], error)
}

// NewAnimeClient constructs a client for the within.website.x.sanguisuga.Anime service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnimeClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnimeClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &animeClient{
		list: connect.NewClient[emptypb.Empty, sanguisuga.Shows](
			httpClient,
			baseURL+AnimeListProcedure,
			connect.WithSchema(animeListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		track: connect.NewClient[sanguisuga.Show, emptypb.Empty](
			httpClient,
			baseURL+AnimeTrackProcedure,
			connect.WithSchema(animeTrackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		untrack: connect.NewClient[sanguisuga.Show, emptypb.Empty](
			httpClient,
			baseURL+AnimeUntrackProcedure,
			connect.WithSchema(animeUntrackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		snatches: connect.NewClient[emptypb.Empty, sanguisuga.AnimeSnatches](
			httpClient,
			baseURL+AnimeSnatchesProcedure,
			connect.WithSchema(animeSnatchesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// animeClient implements AnimeClient.
type animeClient struct {
	list     *connect.Client[emptypb.Empty, sanguisuga.Shows]
	track    *connect.Client[sanguisuga.Show, emptypb.Empty]
	untrack  *connect.Client[sanguisuga.Show, emptypb.Empty]
	snatches *connect.Client[emptypb.Empty, sanguisuga.AnimeSnatches]
}

// List calls within.website.x.sanguisuga.Anime.List.
func (c *animeClient) List(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error) {
	return c.list.CallUnary(ctx, req)
}

// Track calls within.website.x.sanguisuga.Anime.Track.
func (c *animeClient) Track(ctx context.Context, req *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return c.track.CallUnary(ctx, req)
}

// Untrack calls within.website.x.sanguisuga.Anime.Untrack.
func (c *animeClient) Untrack(ctx context.Context, req *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return c.untrack.CallUnary(ctx, req)
}

// Snatches calls within.website.x.sanguisuga.Anime.Snatches.
func (c *animeClient) Snatches(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.AnimeSnatches], error) {
	return c.snatches.CallUnary(ctx, req)
}

// AnimeHandler is an implementation of the within.website.x.sanguisuga.Anime service.
type AnimeHandler interface {
	List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error)
	Track(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Untrack(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error)
	Snatches(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.AnimeSnatches], error)
}

// NewAnimeHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnimeHandler(svc AnimeHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	animeListHandler := connect.NewUnaryHandler(
		AnimeListProcedure,
		svc.List,
		connect.WithSchema(animeListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	animeTrackHandler := connect.NewUnaryHandler(
		AnimeTrackProcedure,
		svc.Track,
		connect.WithSchema(animeTrackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	animeUntrackHandler := connect.NewUnaryHandler(
		AnimeUntrackProcedure,
		svc.Untrack,
		connect.WithSchema(animeUntrackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	animeSnatchesHandler := connect.NewUnaryHandler(
		AnimeSnatchesProcedure,
		svc.Snatches,
		connect.WithSchema(animeSnatchesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.sanguisuga.Anime/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnimeListProcedure:
			animeListHandler.ServeHTTP(w, r)
		case AnimeTrackProcedure:
			animeTrackHandler.ServeHTTP(w, r)
		case AnimeUntrackProcedure:
			animeUntrackHandler.ServeHTTP(w, r)
		case AnimeSnatchesProcedure:
			animeSnatchesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnimeHandler returns CodeUnimplemented from all methods.
type UnimplementedAnimeHandler struct{}

func (UnimplementedAnimeHandler) List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.Shows], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.Anime.List is not implemented"))
}

func (UnimplementedAnimeHandler) Track(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.Anime.Track is not implemented"))
}

func (UnimplementedAnimeHandler) Untrack(context.Context, *connect.Request[sanguisuga.Show]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.Anime.Untrack is not implemented"))
}

func (UnimplementedAnimeHandler) Snatches(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[sanguisuga.AnimeSnatches], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.sanguisuga.Anime.Snatches is not implemented"))
}
