// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: mimi/announce/announce.proto

package announceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
	jsonfeed "within.website/x/buf/external/jsonfeed"
	announce "within.website/x/buf/mimi/announce"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnnounceName is the fully-qualified name of the Announce service.
	AnnounceName = "within.website.x.mimi.announce.Announce"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnnounceAnnounceProcedure is the fully-qualified name of the Announce's Announce RPC.
	AnnounceAnnounceProcedure = "/within.website.x.mimi.announce.Announce/Announce"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	announceServiceDescriptor        = announce.File_mimi_announce_announce_proto.Services().ByName("Announce")
	announceAnnounceMethodDescriptor = announceServiceDescriptor.Methods().ByName("Announce")
)

// AnnounceClient is a client for the within.website.x.mimi.announce.Announce service.
type AnnounceClient interface {
	Announce(context.Context, *connect.Request[jsonfeed.Item]) (*connect.Response[emptypb.Empty], error)
}

// NewAnnounceClient constructs a client for the within.website.x.mimi.announce.Announce service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnnounceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnnounceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &announceClient{
		announce: connect.NewClient[jsonfeed.Item, emptypb.Empty](
			httpClient,
			baseURL+AnnounceAnnounceProcedure,
			connect.WithSchema(announceAnnounceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// announceClient implements AnnounceClient.
type announceClient struct {
	announce *connect.Client[jsonfeed.Item, emptypb.Empty]
}

// Announce calls within.website.x.mimi.announce.Announce.Announce.
func (c *announceClient) Announce(ctx context.Context, req *connect.Request[jsonfeed.Item]) (*connect.Response[emptypb.Empty], error) {
	return c.announce.CallUnary(ctx, req)
}

// AnnounceHandler is an implementation of the within.website.x.mimi.announce.Announce service.
type AnnounceHandler interface {
	Announce(context.Context, *connect.Request[jsonfeed.Item]) (*connect.Response[emptypb.Empty], error)
}

// NewAnnounceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnnounceHandler(svc AnnounceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	announceAnnounceHandler := connect.NewUnaryHandler(
		AnnounceAnnounceProcedure,
		svc.Announce,
		connect.WithSchema(announceAnnounceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/within.website.x.mimi.announce.Announce/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnnounceAnnounceProcedure:
			announceAnnounceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnnounceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnnounceHandler struct{}

func (UnimplementedAnnounceHandler) Announce(context.Context, *connect.Request[jsonfeed.Item]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("within.website.x.mimi.announce.Announce.Announce is not implemented"))
}
