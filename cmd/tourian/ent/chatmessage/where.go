// Code generated by ent, DO NOT EDIT.

package chatmessage

import (
	"entgo.io/ent/dialect/sql"
	"within.website/x/cmd/tourian/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldID, id))
}

// ConversationID applies equality check predicate on the "conversation_id" field. It's identical to ConversationIDEQ.
func ConversationID(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldConversationID, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldRole, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldContent, v))
}

// ConversationIDEQ applies the EQ predicate on the "conversation_id" field.
func ConversationIDEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldConversationID, v))
}

// ConversationIDNEQ applies the NEQ predicate on the "conversation_id" field.
func ConversationIDNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldConversationID, v))
}

// ConversationIDIn applies the In predicate on the "conversation_id" field.
func ConversationIDIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldConversationID, vs...))
}

// ConversationIDNotIn applies the NotIn predicate on the "conversation_id" field.
func ConversationIDNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldConversationID, vs...))
}

// ConversationIDGT applies the GT predicate on the "conversation_id" field.
func ConversationIDGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldConversationID, v))
}

// ConversationIDGTE applies the GTE predicate on the "conversation_id" field.
func ConversationIDGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldConversationID, v))
}

// ConversationIDLT applies the LT predicate on the "conversation_id" field.
func ConversationIDLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldConversationID, v))
}

// ConversationIDLTE applies the LTE predicate on the "conversation_id" field.
func ConversationIDLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldConversationID, v))
}

// ConversationIDContains applies the Contains predicate on the "conversation_id" field.
func ConversationIDContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldConversationID, v))
}

// ConversationIDHasPrefix applies the HasPrefix predicate on the "conversation_id" field.
func ConversationIDHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldConversationID, v))
}

// ConversationIDHasSuffix applies the HasSuffix predicate on the "conversation_id" field.
func ConversationIDHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldConversationID, v))
}

// ConversationIDEqualFold applies the EqualFold predicate on the "conversation_id" field.
func ConversationIDEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldConversationID, v))
}

// ConversationIDContainsFold applies the ContainsFold predicate on the "conversation_id" field.
func ConversationIDContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldConversationID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldRole, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ChatMessage {
	return predicate.ChatMessage(sql.FieldContainsFold(FieldContent, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChatMessage) predicate.ChatMessage {
	return predicate.ChatMessage(sql.NotPredicates(p))
}
