package main

templ base(title string, body templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="https://cdn.xeiaso.net/static/pkg/iosevka/family.css"/>
			<link rel="stylesheet" href="/static/styles.css"/>
			<title>{ title }</title>
			<style>
        [x-cloak] {
            display: none
        }
    </style>
			<script src="/static/alpine.js" defer></script>
		</head>
		<body class="flex items-start justify-center h-full bg-gray-50">
			<div class="w-full max-w-4xl px-2">
				<nav class="my-4">
					<a class="font-semibold underline text-gray-900 hover:text-gray-500" href="/">sanguisuga</a> - <a
	class="font-semibold underline text-gray-900 hover:text-gray-500"
	href="/anime"
>Anime</a> - <a
	href="/tv"
	class="font-semibold underline text-gray-900 hover:text-gray-500"
	href="/tv"
>TV</a>
				</nav>
				<h1 class="mb-2 mt-0 text-3xl font-medium leading-tight text-primary">
					{ title }
				</h1>
				@body
				<footer class="mt-2 bg-neutral-200 text-center dark:bg-neutral-700 lg:text-left">
					<div class="p-4 text-neutral-700 dark:text-neutral-200">
						From <a class="text-neutral-800 dark:text-neutral-400" href="https://within.website">Within</a>.
					</div>
				</footer>
			</div>
		</body>
	</html>
}

templ notFoundPage() {
	<p class="my-4">If you expected to find a page here, this ain't it chief. Try <a href="/">going home</a>.</p>
}

templ indexPage() {
	<p class="mt-4 max-w-xl">
		Welcome to sanguisuga. This is a tool that will help you leech content from private trackers
		and XDCC bots. The following options are available:
	</p>
	<ul class="list-disc list-inside mt-4">
		<li><a class="font-semibold underline text-gray-900 hover:text-gray-500" href="/anime">Anime</a></li>
		<li><a class="font-semibold underline text-gray-900 hover:text-gray-500" href="/tv">TV</a> (western TV)</li>
	</ul>
	<p class="my-4 max-w-xl">Thank you for following the development of sanguisuga.</p>
}

templ animePage() {
	<h2 class="my-4 text-2xl font-medium leading-tight text-primary">Shows</h2>
	<div x-data="{ shows: [] }" x-init="shows = await (await fetch('/api/anime/list')).json()">
		<table class="border-collapse w-full border border-slate-400 bg-white text-sm shadow-sm">
			<thead class="bg-slate-50">
				<tr>
					<th class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left">Title</th>
					<th class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left">Disk Path</th>
					<th class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left"></th>
				</tr>
			</thead>
			<template x-for="show in shows">
				<tr>
					<td class="border border-slate-300 p-4 text-slate-500" x-text="show.title"></td>
					<td class="border border-slate-300 p-4 text-slate-500"><code x-text="show.diskPath"></code></td>
					<td class="border border-slate-300 p-4 text-slate-500">
						<button
							class="bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white p-2"
							@click="(e) => {
                            fetch('/api/anime/untrack', {
                                method: 'POST',
                                body: JSON.stringify(show),
                            })
                                .then(() => e.target.parentElement.parentElement.remove())
                                .catch((e) => alert(e))
                            }"
						>üóëÔ∏è</button>
					</td>
				</tr>
			</template>
		</table>
	</div>
	<h2 class="my-4 text-2xl font-medium leading-tight text-primary">Downloads</h2>
	<div x-data="{ open: false }">
		<button
			class="bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white p-2 mb-2"
			@click="open = ! open"
		>Show</button>
		<div
			class="bg-neutral-300 p-2"
			x-show="open"
			x-show="open"
			x-transition:enter="transition ease-out duration-300"
			x-transition:leave="transition ease-in duration-300"
		>
			<p class="mb-4">{ "Every one of these files is saved in the snatchlist and should be available on Plex. If a file is not available, you may need to check if someone put RAR files in a torrent. Again." }</p>
			<div x-data="{ downloads: {} }" x-init="downloads = await (await fetch('/api/anime/snatches')).json()">
				<table class="border-collapse w-full border border-slate-400 bg-white text-sm shadow-sm">
					<thead class="bg-slate-50">
						<tr>
							<th class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left">Show</th>
							<th class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left">
								Episode
							</th>
							<th class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left">Method</th>
						</tr>
					</thead>
					<template x-for="download in Object.values(downloads)">
						<tr>
							<td class="border border-slate-300 p-4 text-slate-500" x-text="download.showName"></td>
							<td class="border border-slate-300 p-4 text-slate-500" x-text="download.episode"></td>
							<td class="border border-slate-300 p-4 text-slate-500">DCC</td>
						</tr>
					</template>
				</table>
			</div>
		</div>
	</div>
	<h2 class="my-4 text-2xl font-medium leading-tight text-primary">Track new show</h2>
	<script>
    function trackForm() {
        return {
            formData: {
                title: "",
                diskPath: "/data/TV/",
                quality: "1080p",
            },
            message: '',
            buttonLabel: "Submit",

            submitData() {
                this.message = ''

                fetch('/api/anime/track', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(this.formData),
                })
                    .then(() => {
                        this.message = `Tracking ${this.formData.title}.`;
                    })
                    .catch((e) => {
                        this.message = `error: ${e}`;
                    });
            }
        }
    }
</script>
	<div class="w-64 my-4" x-data="trackForm()">
		<div class="mb-4">
			<label class="block mb-2">Title:</label>
			<input type="text" name="title" class="border w-full p-1" x-model="formData.title"/>
		</div>
		<div class="mb-4">
			<label class="block mb-2">Disk Path:</label>
			<input type="text" name="diskPath" class="border w-full p-1" value="/data/TV/" x-model="formData.diskPath"/>
		</div>
		<button
			class="bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white w-full p-2"
			x-text="buttonLabel"
			@click="submitData"
		></button>
		<p x-text="message"></p>
	</div>
}

templ tvPage() {
	<h2 class="my-4 text-2xl font-medium leading-tight text-primary">Shows</h2>
	<div
		x-data="{ shows: [] }"
		x-init="shows = await (await fetch('/api/tv/list')).json()"
	>
		<table
			class="border-collapse w-full border border-slate-400 bg-white text-sm shadow-sm"
		>
			<thead class="bg-slate-50">
				<tr>
					<th
						class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left"
					>
						Title
					</th>
					<th
						class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left"
					>
						Disk Path
					</th>
					<th
						class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left"
					></th>
				</tr>
			</thead>
			<template x-for="show in shows">
				<tr>
					<td
						class="border border-slate-300 p-4 text-slate-500"
						x-text="show.title"
					></td>
					<td class="border border-slate-300 p-4 text-slate-500">
						<code x-text="show.diskPath"></code>
					</td>
					<td class="border border-slate-300 p-4 text-slate-500">
						<button
							class="bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white p-2"
							@click="(e) => {
                            fetch('/api/tv/untrack', {
                                method: 'POST',
                                body: JSON.stringify(show),
                            })
                                .then(() => e.target.parentElement.parentElement.remove())
                                .catch((e) => alert(e))
                            }"
						>
							üóëÔ∏è
						</button>
					</td>
				</tr>
			</template>
		</table>
	</div>
	<h2 class="my-4 text-2xl font-medium leading-tight text-primary">Downloads</h2>
	<div x-data="{ open: false }">
		<button
			class="bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white p-2 mb-2"
			@click="open = ! open"
		>
			Show
		</button>
		<div
			class="bg-neutral-300 p-2"
			x-show="open"
			x-show="open"
			x-transition:enter="transition ease-out duration-300"
			x-transition:leave="transition ease-in duration-300"
		>
			<p class="mb-4">
				{ "Every one of these files is saved in the snatchlist and should be available on Plex. If a file is not available, you may need to check if someone put RAR files in a torrent. Again." }
			</p>
			<div
				x-data="{ downloads: {} }"
				x-init="downloads = await (await fetch('/api/tv/snatches')).json()"
			>
				<table
					class="border-collapse w-full border border-slate-400 bg-white text-sm shadow-sm"
				>
					<thead class="bg-slate-50">
						<tr>
							<th
								class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left"
							>
								Show + Episode
							</th>
							<th
								class="w-1/2 border border-slate-300 font-semibold p-4 text-slate-900 text-left"
							>
								Torrent Link
							</th>
						</tr>
					</thead>
					<template x-for="download in Object.keys(downloads)">
						<tr>
							<td
								class="border border-slate-300 p-4 text-slate-500 mx-auto"
								x-text="download"
							></td>
							<td
								class="border border-slate-300 p-4 text-slate-500"
								x-html="() => `<a href='https://www.torrentleech.org/torrent/${downloads[download].TorrentID}' target='_blank'>üîó</a>`"
							></td>
						</tr>
					</template>
				</table>
			</div>
		</div>
	</div>
	<h2 class="my-4 text-2xl font-medium leading-tight text-primary">
		Track new show
	</h2>
	<script>
  function trackForm() {
    return {
      formData: {
        title: "",
        diskPath: "/data/TV/",
        quality: "1080p",
      },
      message: "",
      buttonLabel: "Submit",

      submitData() {
        this.message = "";

        fetch("/api/tv/track", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(this.formData),
        })
          .then(() => {
            this.message = `Tracking ${this.formData.title}.`;
          })
          .catch((e) => {
            this.message = `error: ${e}`;
          });
      },
    };
  }
</script>
	<div class="w-64 my-4" x-data="trackForm()">
		<div class="mb-4">
			<label class="block mb-2">Title:</label>
			<input
				type="text"
				name="title"
				class="border w-full p-1"
				x-model="formData.title"
			/>
		</div>
		<div class="mb-4">
			<label class="block mb-2">Disk Path:</label>
			<input
				type="text"
				name="diskPath"
				class="border w-full p-1"
				value="/data/TV/"
				x-model="formData.diskPath"
			/>
		</div>
		<button
			class="bg-gray-700 hover:bg-gray-800 disabled:opacity-50 text-white w-full p-2"
			x-text="buttonLabel"
			@click="submitData"
		></button>
		<p x-text="message"></p>
	</div>
}
